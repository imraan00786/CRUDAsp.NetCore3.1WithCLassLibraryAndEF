(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./di", "@aurelia/metadata", "./logger", "./path", "./platform", "./reporter", "./profiler", "./resource", "./eventaggregator", "./functions"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var di_1 = require("./di");
    exports.all = di_1.all;
    exports.DI = di_1.DI;
    exports.IContainer = di_1.IContainer;
    exports.inject = di_1.inject;
    exports.IServiceLocator = di_1.IServiceLocator;
    exports.lazy = di_1.lazy;
    exports.optional = di_1.optional;
    exports.ignore = di_1.ignore;
    exports.Registration = di_1.Registration;
    exports.singleton = di_1.singleton;
    exports.transient = di_1.transient;
    exports.InstanceProvider = di_1.InstanceProvider;
    exports.newInstanceForScope = di_1.newInstanceForScope;
    exports.newInstanceOf = di_1.newInstanceOf;
    exports.DefaultContainerConfiguration = di_1.DefaultContainerConfiguration;
    exports.DefaultResolver = di_1.DefaultResolver;
    var metadata_1 = require("@aurelia/metadata");
    exports.metadata = metadata_1.metadata;
    exports.Metadata = metadata_1.Metadata;
    exports.isNullOrUndefined = metadata_1.isNullOrUndefined;
    exports.isObject = metadata_1.isObject;
    exports.applyMetadataPolyfill = metadata_1.applyMetadataPolyfill;
    var logger_1 = require("./logger");
    exports.ColorOptions = logger_1.ColorOptions;
    exports.ILogConfig = logger_1.ILogConfig;
    exports.ILogEventFactory = logger_1.ILogEventFactory;
    exports.ISink = logger_1.ISink;
    exports.ILogger = logger_1.ILogger;
    exports.LogConfig = logger_1.LogConfig;
    exports.DefaultLogEvent = logger_1.DefaultLogEvent;
    exports.DefaultLogEventFactory = logger_1.DefaultLogEventFactory;
    exports.DefaultLogger = logger_1.DefaultLogger;
    exports.ConsoleSink = logger_1.ConsoleSink;
    exports.LoggerConfiguration = logger_1.LoggerConfiguration;
    exports.format = logger_1.format;
    var path_1 = require("./path");
    exports.relativeToFile = path_1.relativeToFile;
    exports.join = path_1.join;
    var platform_1 = require("./platform");
    exports.PLATFORM = platform_1.PLATFORM;
    var reporter_1 = require("./reporter");
    exports.Reporter = reporter_1.Reporter;
    exports.Tracer = reporter_1.Tracer;
    exports.LogLevel = reporter_1.LogLevel;
    var profiler_1 = require("./profiler");
    exports.Profiler = profiler_1.Profiler;
    var resource_1 = require("./resource");
    exports.Protocol = resource_1.Protocol;
    exports.fromAnnotationOrDefinitionOrTypeOrDefault = resource_1.fromAnnotationOrDefinitionOrTypeOrDefault;
    exports.fromAnnotationOrTypeOrDefault = resource_1.fromAnnotationOrTypeOrDefault;
    exports.fromDefinitionOrDefault = resource_1.fromDefinitionOrDefault;
    var eventaggregator_1 = require("./eventaggregator");
    exports.EventAggregator = eventaggregator_1.EventAggregator;
    exports.IEventAggregator = eventaggregator_1.IEventAggregator;
    var functions_1 = require("./functions");
    exports.isArrayIndex = functions_1.isArrayIndex;
    exports.camelCase = functions_1.camelCase;
    exports.kebabCase = functions_1.kebabCase;
    exports.pascalCase = functions_1.pascalCase;
    exports.toArray = functions_1.toArray;
    exports.nextId = functions_1.nextId;
    exports.resetId = functions_1.resetId;
    exports.compareNumber = functions_1.compareNumber;
    exports.mergeDistinct = functions_1.mergeDistinct;
    exports.isNumberOrBigInt = functions_1.isNumberOrBigInt;
    exports.isStringOrDate = functions_1.isStringOrDate;
    exports.bound = functions_1.bound;
    exports.mergeArrays = functions_1.mergeArrays;
    exports.mergeObjects = functions_1.mergeObjects;
    exports.firstDefined = functions_1.firstDefined;
    exports.getPrototypeChain = functions_1.getPrototypeChain;
    exports.isNativeFunction = functions_1.isNativeFunction;
});
//# sourceMappingURL=index.js.map